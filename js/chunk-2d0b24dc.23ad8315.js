(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b24dc"],{2415:function(n,e,t){"use strict";t.r(e);var a=function(){var n=this,e=n._self._c;return e("div",[n._m(0),e("div",{staticClass:"content-section implementation"},[e("div",{staticClass:"card"},[e("TreeTable",{attrs:{value:n.nodes,lazy:!0,paginator:!0,rows:n.rows,loading:n.loading,totalRecords:n.totalRecords},on:{"node-expand":n.onExpand,page:n.onPage}},[e("Column",{attrs:{field:"name",header:"Name",expander:!0}}),e("Column",{attrs:{field:"size",header:"Size"}}),e("Column",{attrs:{field:"type",header:"Type"}})],1)],1)]),e("div",{staticClass:"content-section documentation"},[e("TabView",[e("TabPanel",{attrs:{header:"Source"}},[e("CodeHighlight",[[n._v('\n<TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n    @node-expand="onExpand" @page="onPage" :totalRecords="totalRecords">\n    <Column field="name" header="Name" :expander="true"></Column>\n    <Column field="size" header="Size"></Column>\n    <Column field="type" header="Type"></Column>\n</TreeTable>\n')]],2),e("CodeHighlight",{attrs:{lang:"javascript"}},[n._v("\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n")])],1)],1)],1)])},o=[function(){var n=this,e=n._self._c;return e("div",{staticClass:"content-section introduction"},[e("div",{staticClass:"feature-intro"},[e("h1",[n._v("TreeTable "),e("span",[n._v("Lazy")])]),e("p",[n._v("Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition,\n                    children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..")])])])}],i=(t("8e6e"),t("ac6a"),t("456d"),t("7f7f"),t("bd86"));function d(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?d(Object(t),!0).forEach((function(e){Object(i["a"])(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var s={data:function(){return{nodes:null,rows:10,loading:!1,totalRecords:0}},mounted:function(){var n=this;this.loading=!0,setTimeout((function(){n.loading=!1,n.nodes=n.loadNodes(0,n.rows),n.totalRecords=1e3}),1e3)},methods:{onExpand:function(n){var e=this;n.children||(this.loading=!0,setTimeout((function(){var t=r({},n);t.children=[{data:{name:t.data.name+" - 0",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}},{data:{name:t.data.name+" - 1",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}}];var a=e.nodes.map((function(e){return e.key===n.key&&(e=t),e}));e.loading=!1,e.nodes=a}),250))},onPage:function(n){var e=this;this.loading=!0,setTimeout((function(){e.loading=!1,e.nodes=e.loadNodes(n.first,e.rows)}),1e3)},loadNodes:function(n,e){for(var t=[],a=0;a<e;a++){var o={key:n+a,data:{name:"Item "+(n+a),size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+(n+a)},leaf:!1};t.push(o)}return t}}},l=s,c=t("2877"),u=Object(c["a"])(l,a,o,!1,null,null,null);e["default"]=u.exports}}]);